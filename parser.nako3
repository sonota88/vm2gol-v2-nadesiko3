# -*- comment-start: "#" -*-

#include lib/utils.nako3
#end_include

# --------------------------------
# グローバル変数

トークン列 = []
カーソル = 0

# --------------------------------

●現在トークン取得とは
    トークン列@カーソルを戻す
ここまで

●現在トークン値取得とは
    現在トークン取得してトークンに代入
    トークンの値取得して戻す
ここまで

●カーソル進とは
    カーソル＝カーソル + 1
ここまで

●最後判定とは
    それは（トークン列の要素数） <= カーソル
ここまで

●（トークンの）行番号取得とは
    トークン@0を戻す
ここまで

●（トークンの）種類取得とは
    トークン@1を戻す
ここまで

●（トークンの）値取得とは
    トークン@2を戻す
ここまで

●（期待トークン値を）消費とは
    現在トークン取得してトークンに代入
    トークンの値取得して値に代入

    もし値が期待トークン値ならば
        カーソル = カーソル + 1
    違えば
        トークンの行番号取得して行番号に代入
        「消費: 行番号（{行番号}） 期待する値（{期待トークン値}） 実際の値（{値}）」で異常終了
    ここまで
ここまで

# --------------------------------

●引数パースとは
    現在トークン取得してトークンに代入
    カーソル進

    トークンの種類取得して種類に代入
    トークンの値取得して値に代入

    種類で条件分岐
    「int」ならば
        値を整数変換して戻す
        ここまで
    「str」ならば
        値を戻す
        ここまで
    「ident」ならば
        値を戻す
        ここまで
    違えば
        「引数パース: 想定外の種類（{種類}）」で異常終了
        ここまで
    ここまで
ここまで

●引数リストパースとは
    引数リストは[]

    現在トークン値取得して値に代入
    もし値が「)」ならば
        # 引数が0個
        引数リストを戻す
    ここまで

    # 最初の引数
    引数パースして、それを引数リストに配列追加

    # 2番目以降の引数
    現在トークン値取得して値に代入
    (値＝「,」)の間繰り返す
        「,」を消費
        引数パースして、それを引数リストに配列追加
        現在トークン値取得して値に代入
    ここまで

    引数リストを戻す
ここまで

●二項演算子判定とは
    二項演算子一覧は["+", "*", "==", "!="]

    現在トークン値取得して値に代入
    もし(0 <= (二項演算子一覧から値を配列検索))ならば
        真を戻す
    違えば
        偽を戻す
    ここまで
ここまで

●式因子パースとは
    現在トークン取得してトークンに代入

    トークンの種類取得して種類に代入
    トークンの値取得して値に代入

    種類で条件分岐
    「int」ならば
        カーソル進
        値を整数変換して、それを戻す
        ここまで
    「ident」ならば
        カーソル進
        値を戻す
        ここまで
    「sym」ならば
        「(」を消費
        式パースして、それを式に代入
        「)」を消費
        式を戻す
        ここまで
    違えば
        「式因子パース: 種類（{種類}）」で異常終了
        ここまで
    ここまで
ここまで

●式パースとは
    式因子パースして、式に代入

    (二項演算子判定＝真)の間
        現在トークン値取得して演算子に代入
        カーソル進

        式因子パースして、右辺に代入

        式は[演算子, 式, 右辺]
    ここまで

    式を戻す
ここまで

●set文パースとは
    「set」を消費

    現在トークン値取得して変数名に代入
    カーソル進

    「=」を消費

    式パースして式に代入

    「;」を消費
    ["set", 変数名, 式]を戻す
ここまで

●関数呼出パースとは
    現在トークン値取得して関数名に代入
    カーソル進

    関数呼出は[関数名]

    「(」を消費
    引数リストパースして、それを関数呼出に配列足して関数呼出に代入
    「)」を消費

    関数呼出を戻す
ここまで

●call文パースとは
    「call」を消費

    関数呼出パースして関数呼出に代入
    「;」を消費

    ["call"]に関数呼出を配列足して文に代入
    文を戻す
ここまで

●call_set文パースとは
    「call_set」を消費

    現在トークン値取得して変数名に代入して、カーソル進

    「=」を消費

    関数呼出パースして関数呼出に代入
    「;」を消費

    ["call_set", 変数名, 関数呼出]を戻す
ここまで

●return文パースとは
    「return」を消費

    現在トークン値取得して値に代入
    もし、値が「;」ならば
        「;」を消費
        ["return"]を戻す
    違えば
        式パースして式に代入
        「;」を消費
        ["return", 式]を戻す
    ここまで
ここまで

●while文パースとは
    「while」を消費
    「(」を消費
    式パースして、それを式に代入
    「)」を消費
    波カッコを消費
    文リストパースして、それを文リストに代入
    「}」を消費
    ["while", 式, 文リスト]を戻す
ここまで

●分岐句パースとは
    「when」を消費

    「(」を消費
    式パースして、それを条件式に代入
    「)」を消費

    波カッコを消費
    文リストパースして、それを文リストに代入
    「}」を消費

    when句は[条件式]
    when句に文リストを配列足して、それをwhen句に代入
    when句を戻す
ここまで

●case文パースとは
    「case」を消費

    文は["case"]

    現在トークン値取得して、それを値に代入
    (値＝「when」)の間
        分岐句パースして、それを文に配列追加
        現在トークン値取得して、それを値に代入
    ここまで

    文を戻す
ここまで

●VMコメント文パースとは
    「_cmt」を消費
    「(」を消費

    現在トークン値取得してコメントに代入
    カーソル進

    「)」を消費
    「;」を消費
    ["_cmt", コメント]を戻す
ここまで

●デバッグ文パースとは
    「_debug」を消費
    「(」を消費
    「)」を消費
    「;」を消費
    ["_debug"]を戻す
ここまで

●文パースとは
    現在トークン値取得してトークン値に代入

    トークン値で条件分岐
    「set」ならば
        set文パースして戻す
        ここまで
    「call」ならば
        call文パースして戻す
        ここまで
    「call_set」ならば
        call_set文パースして戻す
        ここまで
    「return」ならば
        return文パースして戻す
        ここまで
    「while」ならば
        while文パースして戻す
        ここまで
    「case」ならば
        case文パースして戻す
        ここまで
    「_cmt」ならば
        VMコメント文パースして戻す
        ここまで
    「_debug」ならば
        デバッグ文パースして戻す
        ここまで
    違えば
        「文パース: 不正なトークン値 ({トークン値})」で異常終了
        ここまで
    ここまで
ここまで

●文リストパースとは
    文リストは[]

    継続フラグは真
    (継続フラグ＝真)の間
        現在トークン値取得して値に代入
        もし値が「}」ならば
            継続フラグは偽
        違えば
            文パースして、それを文リストに配列追加
        ここまで
    ここまで

    文リストを戻す
ここまで

●変数宣言パースとは
    「var」を消費

    現在トークン値取得して変数名に代入
    カーソル進

    現在トークン値取得して値に代入

    値で条件分岐
    「=」ならば
        「=」を消費
        式パースして式に代入
        「;」を消費
        ["var", 変数名, 式]を戻す
        ここまで
    「;」ならば
        「;」を消費
        ["var", 変数名]を戻す
        ここまで
    違えば
        「変数宣言パース: 発生しない想定」で異常終了
        ここまで
    ここまで

ここまで

●関数定義パースとは
    「func」を消費

    現在トークン値取得して関数名に代入
    カーソル進

    「(」を消費
    引数リストパースして関数引数リストに代入
    「)」を消費

    文リストは[]
    継続フラグは真
    波カッコを消費
    (継続フラグ = 真)の間
        現在トークン値取得してトークン値に代入
        もしトークン値が「}」ならば
            継続フラグは偽
        違えば、もしトークン値が「var」ならば
            変数宣言パースして、それを文リストに配列追加
        違えば
            文パースして、それを文リストに配列追加
        ここまで
    ここまで
    「}」を消費

    関数定義は[
      "func",
      関数名,
      関数引数リスト,
      文リスト
    ]

    関数定義を戻す
ここまで

●トップレベル文リストパースとは
    トップレベル文リストは[]

    (最後判定＝偽)の間
        関数定義パースして、それをトップレベル文リストに配列追加
    ここまで

    トップレベル文リストを戻す
ここまで

●パースとは
    astは["top_stmts"]
    トップレベル文リストパースして、それをastに配列足してastに代入

    astを戻す
ここまで

# --------------------------------

標準入力全部読んでソースに代入
ソースをLFで区切って行リストに代入
行リストを反復
    もし、対象が「」ならば
        # スキップ
    違えば
        対象をJSONデコードして、それをトークン列に配列追加
    ここまで
ここまで

パースして抽象構文木に代入してください。
抽象構文木をJSONエンコードして、それを表示してください。お願いします。
