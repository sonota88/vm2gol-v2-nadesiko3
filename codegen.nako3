# -*- comment-start: "#" -*-

#include lib/utils.nako3
#end_include

# --------------------------------
# グローバル変数

グローバルID = 0

●ラベルID取得
    グローバルID = グローバルID + 1
    グローバルIDを戻す
ここまで

# --------------------------------

●プロローグ生成
    「  push bp」と表示
    「  cp sp bp」と表示
ここまで

●エピローグ生成
    「  cp bp sp」と表示
    「  pop bp」と表示
ここまで


●（変数リストで変数名の）ローカル変数変位取得とは
    変数リストから変数名を配列検索して、それを位置に代入
    もし、位置＜0ならば
        「ローカル変数変位取得: 発生しない想定」で異常終了
    ここまで

    (0 - (位置 + 1))を戻す
ここまで

●（引数リストで引数名の）関数引数変位取得とは
    引数リストから引数名を配列検索して、それを位置に代入
    もし、位置＜0ならば
        「関数引数変位取得: 発生しない想定」で異常終了
    ここまで

    (位置 + 2)を戻す
ここまで

# --------------------------------

●加算式コード生成とは
    「  pop reg_b」と表示
    「  pop reg_a」と表示
    「  add_ab」と表示
ここまで
    
●乗算式コード生成とは
    「  pop reg_b」と表示
    「  pop reg_a」と表示
    「  mult_ab」と表示
ここまで
    
●一致式コード生成とは
    ラベルID取得してIDに代入
    「  pop reg_b」と表示
    「  pop reg_a」と表示

    「  compare」と表示
    「  jump_eq then_{ID}」と表示

    「  cp 0 reg_a」と表示
    「  jump end_eq_{ID}」と表示

    「label then_{ID}」と表示
    「  cp 1 reg_a」と表示

    「label end_eq_{ID}」と表示
ここまで

●不一致式コード生成とは
    ラベルID取得してIDに代入
    「  pop reg_b」と表示
    「  pop reg_a」と表示

    「  compare」と表示
    「  jump_eq then_{ID}」と表示

    「  cp 1 reg_a」と表示
    「  jump end_neq_{ID}」と表示

    「label then_{ID}」と表示
    「  cp 0 reg_a」と表示

    「label end_neq_{ID}」と表示
ここまで

●（関数引数リストとローカル変数リストで式の）二項演算式コード生成とは
    演算子は式@0
    左辺は式@1
    右辺は式@2

    関数引数リストとローカル変数リストで左辺の式コード生成
    「  push reg_a」と表示

    関数引数リストとローカル変数リストで右辺の式コード生成
    「  push reg_a」と表示

    演算子で条件分岐
    「+」ならば
        加算式コード生成
        ここまで
    「*」ならば
        乗算式コード生成
        ここまで
    「==」ならば
        一致式コード生成
        ここまで
    「!=」ならば
        不一致式コード生成
        ここまで
    違えば
        「二項演算式コード生成: サポートしていない演算子 ({演算子})」で異常終了
        ここまで
    ここまで
ここまで

●（関数引数リストとローカル変数リストで式の）式コード生成とは
    型はTYPEOF(式)

    型で条件分岐
    「number」ならば
        「  cp {式} reg_a」と表示
        ここまで
    「string」ならば
        もし (ローカル変数リストから式を配列検索して、それが0以上) ならば
            ローカル変数リストで式のローカル変数変位取得して変位に代入
            「  cp [bp:{変位}] reg_a」と表示
        違えば、もし (関数引数リストから式を配列検索して、それが0以上) ならば
            関数引数リストで式の関数引数変位取得して変位に代入
            「  cp [bp:{変位}] reg_a」と表示
        違えば
            「式コード生成: 存在しないローカル変数または関数引数 ({式})」で異常終了
        ここまで

        ここまで
    違えば
        # 配列の場合
        関数引数リストとローカル変数リストで式の二項演算式コード生成
        ここまで
    ここまで
ここまで

●（関数引数リストとローカル変数リストで関数呼出の）関数呼出コード生成とは
    関数名は関数呼出@0
    1で関数呼出の配列末尾取得して、それを引数リストに代入

    iは(引数リストの要素数) - 1
    iが0以上の間
        引数は引数リスト@i
        関数引数リストとローカル変数リストで引数の式コード生成
        「  push reg_a」と表示
        i = i - 1
    ここまで

    ["_cmt", "call  {関数名}"]のVMコメント文コード生成

    「  call {関数名}」と表示
    「  add_sp {引数リストの要素数}」と表示
ここまで

●（関数引数リストとローカル変数リストで文の）call文コード生成とは
    1で文の配列末尾取得して、それを関数呼出に代入

    関数引数リストとローカル変数リストで関数呼出の関数呼出コード生成
ここまで

●（ローカル変数リストと変数名で）結果セットコード生成とは
    もし (ローカル変数リストから変数名を配列検索して、それが0以上) ならば
        ローカル変数リストで変数名のローカル変数変位取得して変位に代入
        「  cp reg_a [bp:{変位}]」と表示
    違えば
        「結果セットコード生成: 存在しないローカル変数 ({式})」で異常終了
    ここまで
ここまで

●（関数引数リストとローカル変数リストで文の）call_set文コード生成とは
    変数名は文@1
    関数呼出は文@2

    関数引数リストとローカル変数リストで関数呼出の関数呼出コード生成
    ローカル変数リストと変数名で結果セットコード生成
ここまで

●（関数引数リストとローカル変数リストで文の）set文コード生成とは
    変数名は文@1
    式は文@2
    関数引数リストとローカル変数リストで式の式コード生成

    ローカル変数リストと変数名で結果セットコード生成
ここまで

●（関数引数リストとローカル変数リストで文の）return文コード生成とは
    式は文@1

    関数引数リストとローカル変数リストで式の式コード生成
ここまで

●（関数引数リストとローカル変数リストで文の）while文コード生成とは
    条件式は文@1
    文リストは文@2

    ラベルID取得してラベルIDに代入
    開始ラベルは「while_{ラベルID}」
    終了ラベルは「end_while_{ラベルID}」

    「label {開始ラベル}」と表示

    関数引数リストとローカル変数リストで条件式の式コード生成

    「  cp 0 reg_b」と表示
    「  compare」と表示

    「  jump_eq {終了ラベル}」と表示

    関数引数リストとローカル変数リストで文リストの文リストコード生成

    「  jump {開始ラベル}」と表示
    「label {終了ラベル}」と表示
ここまで

●（関数引数リストとローカル変数リストで文の）case文コード生成とは
    ラベルID取得してラベルIDに代入
    終了ラベルは「end_case_{ラベルID}」
    分岐終了ラベル先頭は「end_when_{ラベルID}」

    i = 1
    (i < (文の要素数))の間
       分岐は文@i

       条件式は分岐@0
       1で分岐の配列末尾取得して、それを文リストに代入

       関数引数リストとローカル変数リストで条件式の式コード生成

       「  cp 0 reg_b」と表示
       「  compare」と表示
       「  jump_eq {分岐終了ラベル先頭}_{i - 1}」と表示

       関数引数リストとローカル変数リストで文リストの文リストコード生成

       「  jump {終了ラベル}」と表示
       「label {分岐終了ラベル先頭}_{i - 1}」と表示

       i = i + 1
    ここまで

   「label {終了ラベル}」と表示
ここまで

●（文の）VMコメント文コード生成とは
    コメントは文@1

    コメントの「 」を「~」に置換して置換済コメントに代入
    「  _cmt {置換済コメント}」と表示
ここまで
    
●（文の）デバッグ文コード生成とは
    「  _debug」と表示
ここまで
    
●（関数引数リストとローカル変数リストで文の）文コード生成とは
    文@0で条件分岐
    「set」ならば
        関数引数リストとローカル変数リストで文のset文コード生成
        ここまで
    「call」ならば
        関数引数リストとローカル変数リストで文のcall文コード生成
        ここまで
    「call_set」ならば
        関数引数リストとローカル変数リストで文のcall_set文コード生成
        ここまで
    「return」ならば
        関数引数リストとローカル変数リストで文のreturn文コード生成
        ここまで
    「while」ならば
        関数引数リストとローカル変数リストで文のwhile文コード生成
        ここまで
    「case」ならば
        関数引数リストとローカル変数リストで文のcase文コード生成
        ここまで
    「_cmt」ならば
        文のVMコメント文コード生成
        ここまで
    「_debug」ならば
        デバッグ文コード生成
        ここまで
    違えば
        「文コード生成: 想定外の文 ({文})」で異常終了
        ここまで
    ここまで
ここまで

●（関数引数リストとローカル変数リストで文リストの）文リストコード生成とは
    文リストを反復
        文は対象
        関数引数リストとローカル変数リストで文の文コード生成
    ここまで
ここまで

●（関数引数リストとローカル変数リストで文の）変数宣言コード生成とは
    変数名は文@1

    「  sub_sp 1」と表示
    もし(文の配列要素数)が3ならば
        式は文@2
        関数引数リストとローカル変数リストで式の式コード生成
        ローカル変数リストと変数名で結果セットコード生成
    ここまで
ここまで

●（関数定義の）関数定義生成とは
    関数名は関数定義@1
    関数引数リストは関数定義@2
    文リストは関数定義@3

    「label {関数名}」と表示

    プロローグ生成

    ローカル変数リストは[]

    文リストを反復
        文は対象
        もし文@0が「var」ならば
            変数名は文@1
            ローカル変数リストに変数名を配列追加
            関数引数リストとローカル変数リストで文の変数宣言コード生成
        違えば
            関数引数リストとローカル変数リストで文の文コード生成
        ここまで
    ここまで

    エピローグ生成

    「  ret」と表示
ここまで

●（astから）コード生成とは
    「  call main」と表示
    「  exit」と表示

    位置を1から（(astの配列要素数) - 1）まで繰り返す
        関数定義はast@位置
        関数定義の関数定義生成
    ここまで
    
ここまで

標準入力全部読んでjsonに代入

エラー監視
    jsonをJSONデコードして抽象構文木に代入
エラーならば
    「JSONデコード失敗 ({json})」で異常終了
ここまで

抽象構文木からコード生成してください。お願いします。
